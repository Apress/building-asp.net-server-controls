// Title: Building ASP.NET Server Controls
//
// Chapter: 8 - Integrating Client-Side Script
// File: RolloverImageLink.cs
// Written by: Dale Michalk and Rob Cameron
//
// Copyright © 2003, Apress L.P.
using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using System.ComponentModel;

namespace ControlsBookLib.Ch08
{
   [ToolboxData("<{0}:RolloverImageLink runat=server></{0}:RolloverImageLink>"),
   DefaultProperty("NavigateUrl")]
   public class RolloverImageLink : Image
   {
      public bool EnableClientScript
      {
         get
         {
            object script = ViewState["EnableClientScript"];
            return (script == null) ? true : (bool) script;
         }
         set
         {
            ViewState["EnableClientScript"] = value;
         }
      }

      public string NavigateUrl
      {
         get
         {
            object url = ViewState["NavigateUrl"];
            return (url == null) ? "" : (string) url;
         }
         set
         {
            ViewState["NavigateUrl"] = value;
         }
      }

      public string OverImageUrl
      {
         get
         {
            object url = ViewState["OverImageUrl"];
            return (url == null) ? "" : (string) url;
         }
         set
         {
            ViewState["OverImageUrl"] = value;
         }
      }

      public bool PreLoadImages
      {
         get
         {
            object pre = ViewState["PreLoadImages"];
            return (pre == null) ? true : (bool) pre;
         }
         set
         {
            ViewState["PreLoadImages"] = value;
         }
      }

      protected const string IMAGE_SWAP_FUNC = "__Image_Swap";

      //@ symbol in front of the string preserves the layout of the string content
      protected const string SWAP_SCRIPT_BLOCK = @"
      <script language='JavaScript'>
      function __Image_Swap(sName, sSrc)
      {
      document.images[sName].src = sSrc;
      }
      </script>
      ";

      protected const string PRELOAD_SCRIPT_BLOCK = @"
      <script language='JavaScript'>
      for (index = 0; index < {arrayname}; index++)
      {
      loadimg = new Image();
      loadimg.src = {arrayname}[index];
      }
      </script>
      ";

      private bool renderClientScript = false;
      protected void DetermineRenderClientScript()
      {
         if (EnableClientScript &&
            Context.Request.Browser.JavaScript)
            renderClientScript = true;
      }

      protected override void OnPreRender(EventArgs e)
      {
         base.OnPreRender(e);

         // use type of control to uniquely id the
         // register JavaScript code (only one
         // copy is needed per web form)
         string typename =
            typeof(RolloverImageLink).ToString().Replace(".","_");

         DetermineRenderClientScript();

         if (renderClientScript)
         {
            // register the image swapping JavaScript
            // if it is not already registered
            if (!Page.IsClientScriptBlockRegistered(typename))
            {
               Page.RegisterClientScriptBlock(
                  typename,
                  SWAP_SCRIPT_BLOCK);
            }

            if (this.PreLoadImages)
            {
               // add image names to the
               // array of rollover images to be preloaded
               Page.RegisterArrayDeclaration(typename,
                  "'" + ResolveUrl(this.ImageUrl) + "'," +
                  "'" + ResolveUrl(this.OverImageUrl) + "'");

               // register the image, preloading JavaScript
               // if it is not already registered
               if (!Page.IsStartupScriptRegistered(typename))
               {
                  Page.RegisterStartupScript(
                     typename,
                     PRELOAD_SCRIPT_BLOCK.Replace("{arrayname}",typename));
               }
            }
         }
      }

      protected override void Render(HtmlTextWriter writer)
      {
         // ensure the control is used inside of <form runat="server">
         Page.VerifyRenderingInServerForm(this);

         // set up attributes for the enclosing hyperlink
         // <a href></a> tag pair that go around the <img> tag
         writer.AddAttribute("href",this.NavigateUrl);

         // we have to create an ID for  the <a> tag so that it
         // doesnt conflict with the <img> tag generated by
         // the base Image control
         writer.AddAttribute("name",this.UniqueID + "_href");

         // emit onmouseover/onmouseout attributes that handle
         // client events and invoke our imageswapping JavaScript
         // code if client supports it
         if (renderClientScript)
         {
            writer.AddAttribute("onmouseover",
               IMAGE_SWAP_FUNC + "('" + this.UniqueID + "','" +
               ResolveUrl(this.OverImageUrl) + "');");
            writer.AddAttribute("onmouseout",
               IMAGE_SWAP_FUNC + "('" + this.UniqueID + "','" +
               ResolveUrl(this.ImageUrl) + "');");

         }
         writer.RenderBeginTag(HtmlTextWriterTag.A);

         // use name attribute to identify HTML <img> element
         // for older browsers
         writer.AddAttribute("name",this.UniqueID);

         base.Render(writer);

         writer.RenderEndTag();
      }
   }
}
